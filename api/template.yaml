AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  notification-service

  SAM Template for notification-service

Parameters:
  FirebaseApiKey:
    Type: String
  FirebaseAuthDomain:
    Type: String
  FirebaseProjectId:
    Type: String
  FirebaseStorageBucket:
    Type: String
  FirebaseMessagingSenderId:
    Type: String
  FirebaseAppId:
    Type: String
  FirebaseMeasurementId:
    Type: String
  FirebaseAdminCreds:
    Type: String
  Stage:
    Type: String
  dbRegion:
    Type: String
  dbEndpoint:
    Type: String
  dbTableName:
    Type: String
    Default: UserDeviceToken
  dbIndexName:
    Type: String
    Default: gsiDeviceToken
  dbAccessKeyId:
    Type: String
    Default: ""
  dbSecretAccessKey:
    Type: String
    Default: ""
  messageQueueResourceName:
    Type: String
    Default: MessageQueue
  MessageQueueStreamArn:
    Type: String
  JoinRequestNotificationQueue:
    Type: String
    Default: 39E552E9-0045-4210-9582-80E96553F95C
  ResourceAccountId:
    Type: String
  StagingAccountId:
    Type: String
  OrganizationId:
    Type: String

Conditions:
  IsNotStaging:
    !Not [!Equals [!Ref Stage, staging]]
  IsUSEast1:
    Fn::Equals:
      - !Ref AWS::Region
      - "us-east-1"
  IsUSEast1AndNotStaging:
    Fn::And:
      - Condition: IsUSEast1
      - Condition: IsNotStaging

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30    
    MemorySize: 2048

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

    Environment:
      Variables:
        FirebaseApiKey: !Ref FirebaseApiKey
        FirebaseAuthDomain: !Ref FirebaseAuthDomain
        FirebaseProjectId: !Ref FirebaseProjectId
        FirebaseStorageBucket: !Ref FirebaseStorageBucket
        FirebaseMessagingSenderId: !Ref FirebaseMessagingSenderId
        FirebaseAppId: !Ref FirebaseAppId
        FirebaseMeasurementId: !Ref FirebaseMeasurementId
        FirebaseAdminCreds: !Ref FirebaseAdminCreds
        Stage: !Ref Stage
        dbRegion: !Ref dbRegion
        dbEndpoint: !Ref dbEndpoint
        dbTableName: !Ref dbTableName
        dbAccessKeyId: !Ref dbAccessKeyId
        dbSecretAccessKey: !Ref dbSecretAccessKey  
        TokenTtlDays: 270
        messageQueueResourceName: !Ref messageQueueResourceName
        ResourceAccountId: !Ref ResourceAccountId
        dbIndexName: !Ref dbIndexName
        AwsAccountId: !Sub ${AWS::AccountId}

Resources:
  VerifyTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/functions/verify-token
      Handler: handler.main
      Runtime: nodejs18.x
    Metadata: # Manage esbuild properties
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: es2020
          Sourcemap: false
          EntryPoints:
          - handler.ts
          External:
          - node_modules
          - aws-sdk
          - esbuild

  NotificationServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Stage}
      Auth:
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt VerifyTokenFunction.Arn
        DefaultAuthorizer: TokenAuthorizer

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsUSEast1
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSNSInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permissions to create and manage logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              # Permission for Lambda to read from DynamoDB table
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: 
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${ResourceAccountId}:table/${messageQueueResourceName}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${ResourceAccountId}:table/${messageQueueResourceName}/stream/*
                  - !Sub arn:aws:dynamodb:${dbRegion}:${ResourceAccountId}:table/${dbTableName}
                  - !Sub arn:aws:dynamodb:${dbRegion}:${ResourceAccountId}:table/${dbTableName}/index/gsiDeviceToken
                  - !Sub ${MessageQueueStreamArn}

  NotifyJoinRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: NotifyJoinRequestFunction
      CodeUri: src/
      Handler: handler.main
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Role: !Sub arn:aws:iam:${AWS::AccountId}:role/${AWS::StackName}-LambdaExecutionRole
      Events:
        Notify:
          Type: DynamoDB
          Properties:
            Stream: !Sub ${MessageQueueStreamArn}
            MaximumRetryAttempts: 3
            MaximumRecordAgeInSeconds: 60
            StartingPosition: LATEST
            Enabled: true
            FilterCriteria:
              Filters:
                - Pattern: !Sub "{\"eventName\":[\"INSERT\"],\"dynamodb\":{\"Keys\":{\"queueName\":{\"S\":[\"${JoinRequestNotificationQueue}\"]}},\"NewImage\":{\"stage\":{\"S\":[\"${Stage}\"]}}}}"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
        - functions/notify-join-request/handler.ts
        External:
        - node_modules
        - aws-sdk

  UpdateDeviceTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateDeviceToken
      CodeUri: src/
      Handler: handler.main
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Role: !Sub arn:aws:iam:${AWS::AccountId}:role/${AWS::StackName}-LambdaExecutionRole
      Events:
        Notify:
          Type: Api
          Properties:
            Path: /v1/tokens/
            Method: put
            RestApiId: !Ref NotificationServiceApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false
        EntryPoints:
        - functions/update-token/handler.ts
        External:
        - node_modules
        - aws-sdk
    
  UserDeviceTokenTable:
    Type: AWS::DynamoDB::Table
    Condition: IsUSEast1AndNotStaging
    Properties: 
      TableName: !Sub ${dbTableName}
      AttributeDefinitions: 
        - AttributeName: userId
          AttributeType: S
        - AttributeName: deviceToken
          AttributeType: S
      KeySchema: 
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: deviceToken
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: !Sub ${dbIndexName}
          KeySchema:
            - AttributeName: deviceToken
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
      ResourcePolicy:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
                  # - !Sub arn:aws:sts::${StagingAccountId}:assumed-role/${LambdaExecutionRole}/notification-service-stag-UpdateDeviceTokenFunctio-yI7YSxEurtAA
                  # - !Sub arn:aws:sts::${StagingAccountId}:assumed-role/${LambdaExecutionRole}/notification-service-staging-VerifyTokenFunction-Ts5uFlOPSM7Z
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub arn:aws:dynamodb:${dbRegion}:${AWS::AccountId}:table/UserDeviceToken
                - !Sub arn:aws:dynamodb:${dbRegion}:${AWS::AccountId}:table/UserDeviceToken/index/*
              Condition:
                StringEquals:
                  aws:PrincipalOrgID: !Sub ${OrganizationId}

